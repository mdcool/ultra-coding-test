{
	"info": {
		"_postman_id": "6895587e-83be-4df8-9c2c-d8686d2c8a47",
		"name": "GET users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response should contain more than 10 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).length.to.greaterThan(10);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response should contain more than 10 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).length.to.greaterThan(10);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by bad id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"console.log(jsonData.length)",
							"pm.test(\"Response should contain 0 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?id=intentionally_wrong_value",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "id",
							"value": "intentionally_wrong_value"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by bad name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"console.log(jsonData.length)",
							"pm.test(\"Response should contain 0 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?name=i_hope_nobody_used_this_name",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "name",
							"value": "i_hope_nobody_used_this_name"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by bad email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"console.log(jsonData.length)",
							"pm.test(\"Response should contain 0 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?name=some_intentionally@wrong.email",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "name",
							"value": "some_intentionally@wrong.email"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by bad gender",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"console.log(jsonData.length)",
							"pm.test(\"Response should contain 0 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?gender=i_hope_nobody_used_this_gender",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "gender",
							"value": "i_hope_nobody_used_this_gender"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by bad status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"var jsonData = pm.response.json();",
							"console.log(jsonData.length)",
							"pm.test(\"Response should contain 0 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?name=some_intentionally_wrong_status",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "name",
							"value": "some_intentionally_wrong_status"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get by bad inexisting field",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response should contain more than 10 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).length.to.greaterThan(10);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?wrong_field=some_intentionally_wrong_value",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "wrong_field",
							"value": "some_intentionally_wrong_value"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get with bad auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401); // I really expect the token to be validated by GET",
							"});",
							"var jsonData = pm.response.json();",
							"console.log(jsonData.length)",
							"pm.test(\"Response should contain 0 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "wrong_token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list at wrong page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404); // I would expect to find nothing at 10000000th page",
							"});",
							"pm.test(\"Response should contain more than 10 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).length.to.greaterThan(10);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?page=10000000",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "page",
							"value": "10000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list at wrong negative page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404); // I would expect to find nothing at -10000000th page",
							"});",
							"pm.test(\"Response should contain more than 10 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).length.to.greaterThan(10);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?page=-10000000",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "page",
							"value": "-10000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list with a typo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}typo",
					"host": [
						"{{url}}typo"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list with wrong xml content type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 406\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"pm.test(\"Body is empty\", function () {",
							"    pm.expect(pm.response.text()).to.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{url}}.xmlwrong",
					"host": [
						"{{url}}",
						"xmlwrong"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list with xml content type Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is xml\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/xml\");",
							"});",
							"pm.test(\"Body has xml\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"<?xml\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml",
						"type": "default"
					}
				],
				"url": {
					"raw": "{{url}}.xml",
					"host": [
						"{{url}}",
						"xml"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get list and reach rate limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 429\", function () {",
							"    pm.response.to.have.status(429);",
							"});",
							"pm.test(\"Response should contain more than 10 records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.equal(\"Too many requests\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var request = {",
							"    url: pm.variables.get(\"url\"),",
							"    method: \"POST\",",
							"    header: {",
							"        \"Authorization\": `Bearer ${pm.variables.get(\"slow_auth_token\")}`,",
							"        \"Content-Type\": \"application/json\"",
							"    }",
							"}",
							"pm.sendRequest(request, function (err, response) {",
							"    console.log(response.headers.find(h => h.key == 'X-RateLimit-Remaining'));",
							"});",
							"",
							"",
							"function delay(time) {",
							"  return new Promise(resolve => setTimeout(resolve, time));",
							"}",
							"// we need a proper delay for pre-request to finalize",
							"delay(3000).then(() => console.log('ran after 3 seconds passed'));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{slow_auth_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://gorest.co.in/public/v2/users",
			"type": "default"
		},
		{
			"key": "id",
			"value": ""
		}
	]
}